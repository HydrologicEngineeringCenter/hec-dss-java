// Generated by jextract

package mil.army.usace.hec.dss.internal;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.util.Arrays;
import java.util.stream.Collectors;

import static java.lang.foreign.ValueLayout.JAVA_BYTE;

class hecdss_h {

    private hecdss_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("hecdss"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;

    private static class hec_dss_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_open");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_open(const char *filename, dss_file **dss)
     * }
     */
    public static FunctionDescriptor hec_dss_open$descriptor() {
        return hec_dss_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_open(const char *filename, dss_file **dss)
     * }
     */
    public static MethodHandle hec_dss_open$handle() {
        return hec_dss_open.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_open(const char *filename, dss_file **dss)
     * }
     */
    public static MemorySegment hec_dss_open$address() {
        return hec_dss_open.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_open(const char *filename, dss_file **dss)
     * }
     */
    public static int hec_dss_open(MemorySegment filename, MemorySegment dss) {
        var mh$ = hec_dss_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_open", filename, dss);
            }
            return (int)mh$.invokeExact(filename, dss);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_close(dss_file *dss)
     * }
     */
    public static FunctionDescriptor hec_dss_close$descriptor() {
        return hec_dss_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_close(dss_file *dss)
     * }
     */
    public static MethodHandle hec_dss_close$handle() {
        return hec_dss_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_close(dss_file *dss)
     * }
     */
    public static MemorySegment hec_dss_close$address() {
        return hec_dss_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_close(dss_file *dss)
     * }
     */
    public static int hec_dss_close(MemorySegment dss) {
        var mh$ = hec_dss_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_close", dss);
            }
            return (int)mh$.invokeExact(dss);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_getVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_getVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_getVersion(dss_file *dss)
     * }
     */
    public static FunctionDescriptor hec_dss_getVersion$descriptor() {
        return hec_dss_getVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_getVersion(dss_file *dss)
     * }
     */
    public static MethodHandle hec_dss_getVersion$handle() {
        return hec_dss_getVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_getVersion(dss_file *dss)
     * }
     */
    public static MemorySegment hec_dss_getVersion$address() {
        return hec_dss_getVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_getVersion(dss_file *dss)
     * }
     */
    public static int hec_dss_getVersion(MemorySegment dss) {
        var mh$ = hec_dss_getVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_getVersion", dss);
            }
            return (int)mh$.invokeExact(dss);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_getFileVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_getFileVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_getFileVersion(const char *filename)
     * }
     */
    public static FunctionDescriptor hec_dss_getFileVersion$descriptor() {
        return hec_dss_getFileVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_getFileVersion(const char *filename)
     * }
     */
    public static MethodHandle hec_dss_getFileVersion$handle() {
        return hec_dss_getFileVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_getFileVersion(const char *filename)
     * }
     */
    public static MemorySegment hec_dss_getFileVersion$address() {
        return hec_dss_getFileVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_getFileVersion(const char *filename)
     * }
     */
    public static int hec_dss_getFileVersion(MemorySegment filename) {
        var mh$ = hec_dss_getFileVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_getFileVersion", filename);
            }
            return (int)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_set_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_set_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_set_value(const char *name, const int value)
     * }
     */
    public static FunctionDescriptor hec_dss_set_value$descriptor() {
        return hec_dss_set_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_set_value(const char *name, const int value)
     * }
     */
    public static MethodHandle hec_dss_set_value$handle() {
        return hec_dss_set_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_set_value(const char *name, const int value)
     * }
     */
    public static MemorySegment hec_dss_set_value$address() {
        return hec_dss_set_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_set_value(const char *name, const int value)
     * }
     */
    public static int hec_dss_set_value(MemorySegment name, int value) {
        var mh$ = hec_dss_set_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_set_value", name, value);
            }
            return (int)mh$.invokeExact(name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_set_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_set_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_set_string(const char *name, const char *value)
     * }
     */
    public static FunctionDescriptor hec_dss_set_string$descriptor() {
        return hec_dss_set_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_set_string(const char *name, const char *value)
     * }
     */
    public static MethodHandle hec_dss_set_string$handle() {
        return hec_dss_set_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_set_string(const char *name, const char *value)
     * }
     */
    public static MemorySegment hec_dss_set_string$address() {
        return hec_dss_set_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_set_string(const char *name, const char *value)
     * }
     */
    public static int hec_dss_set_string(MemorySegment name, MemorySegment value) {
        var mh$ = hec_dss_set_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_set_string", name, value);
            }
            return (int)mh$.invokeExact(name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_catalog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_INT
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_catalog");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_catalog(dss_file *dss, char *pathBuffer, int *recordTypes, const char *pathFilter, const int count, const int pathBufferItemSize)
     * }
     */
    public static FunctionDescriptor hec_dss_catalog$descriptor() {
        return hec_dss_catalog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_catalog(dss_file *dss, char *pathBuffer, int *recordTypes, const char *pathFilter, const int count, const int pathBufferItemSize)
     * }
     */
    public static MethodHandle hec_dss_catalog$handle() {
        return hec_dss_catalog.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_catalog(dss_file *dss, char *pathBuffer, int *recordTypes, const char *pathFilter, const int count, const int pathBufferItemSize)
     * }
     */
    public static MemorySegment hec_dss_catalog$address() {
        return hec_dss_catalog.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_catalog(dss_file *dss, char *pathBuffer, int *recordTypes, const char *pathFilter, const int count, const int pathBufferItemSize)
     * }
     */
    public static int hec_dss_catalog(MemorySegment dss, MemorySegment pathBuffer, MemorySegment recordTypes, MemorySegment pathFilter, int count, int pathBufferItemSize) {
        var mh$ = hec_dss_catalog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_catalog", dss, pathBuffer, recordTypes, pathFilter, count, pathBufferItemSize);
            }
            return (int)mh$.invokeExact(dss, pathBuffer, recordTypes, pathFilter, count, pathBufferItemSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_tsGetDateTimeRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_tsGetDateTimeRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_tsGetDateTimeRange(dss_file *dss, const char *pathname, const int boolFullSet, int *firstValidJulian, int *firstSeconds, int *lastValidJulian, int *lastSeconds)
     * }
     */
    public static FunctionDescriptor hec_dss_tsGetDateTimeRange$descriptor() {
        return hec_dss_tsGetDateTimeRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_tsGetDateTimeRange(dss_file *dss, const char *pathname, const int boolFullSet, int *firstValidJulian, int *firstSeconds, int *lastValidJulian, int *lastSeconds)
     * }
     */
    public static MethodHandle hec_dss_tsGetDateTimeRange$handle() {
        return hec_dss_tsGetDateTimeRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_tsGetDateTimeRange(dss_file *dss, const char *pathname, const int boolFullSet, int *firstValidJulian, int *firstSeconds, int *lastValidJulian, int *lastSeconds)
     * }
     */
    public static MemorySegment hec_dss_tsGetDateTimeRange$address() {
        return hec_dss_tsGetDateTimeRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_tsGetDateTimeRange(dss_file *dss, const char *pathname, const int boolFullSet, int *firstValidJulian, int *firstSeconds, int *lastValidJulian, int *lastSeconds)
     * }
     */
    public static int hec_dss_tsGetDateTimeRange(MemorySegment dss, MemorySegment pathname, int boolFullSet, MemorySegment firstValidJulian, MemorySegment firstSeconds, MemorySegment lastValidJulian, MemorySegment lastSeconds) {
        var mh$ = hec_dss_tsGetDateTimeRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_tsGetDateTimeRange", dss, pathname, boolFullSet, firstValidJulian, firstSeconds, lastValidJulian, lastSeconds);
            }
            return (int)mh$.invokeExact(dss, pathname, boolFullSet, firstValidJulian, firstSeconds, lastValidJulian, lastSeconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_tsGetSizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_tsGetSizes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_tsGetSizes(dss_file *dss, const char *pathname, const char *startDate, const char *startTime, const char *endDate, const char *endTime, int *numberValues, int *qualityElementSize)
     * }
     */
    public static FunctionDescriptor hec_dss_tsGetSizes$descriptor() {
        return hec_dss_tsGetSizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_tsGetSizes(dss_file *dss, const char *pathname, const char *startDate, const char *startTime, const char *endDate, const char *endTime, int *numberValues, int *qualityElementSize)
     * }
     */
    public static MethodHandle hec_dss_tsGetSizes$handle() {
        return hec_dss_tsGetSizes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_tsGetSizes(dss_file *dss, const char *pathname, const char *startDate, const char *startTime, const char *endDate, const char *endTime, int *numberValues, int *qualityElementSize)
     * }
     */
    public static MemorySegment hec_dss_tsGetSizes$address() {
        return hec_dss_tsGetSizes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_tsGetSizes(dss_file *dss, const char *pathname, const char *startDate, const char *startTime, const char *endDate, const char *endTime, int *numberValues, int *qualityElementSize)
     * }
     */
    public static int hec_dss_tsGetSizes(MemorySegment dss, MemorySegment pathname, MemorySegment startDate, MemorySegment startTime, MemorySegment endDate, MemorySegment endTime, MemorySegment numberValues, MemorySegment qualityElementSize) {
        var mh$ = hec_dss_tsGetSizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_tsGetSizes", dss, pathname, startDate, startTime, endDate, endTime, numberValues, qualityElementSize);
            }
            return (int)mh$.invokeExact(dss, pathname, startDate, startTime, endDate, endTime, numberValues, qualityElementSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_tsRetrieveInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_tsRetrieveInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_tsRetrieveInfo(dss_file *dss, const char *pathname, char *units, const int unitsLength, char *type, const int typeLength)
     * }
     */
    public static FunctionDescriptor hec_dss_tsRetrieveInfo$descriptor() {
        return hec_dss_tsRetrieveInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_tsRetrieveInfo(dss_file *dss, const char *pathname, char *units, const int unitsLength, char *type, const int typeLength)
     * }
     */
    public static MethodHandle hec_dss_tsRetrieveInfo$handle() {
        return hec_dss_tsRetrieveInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_tsRetrieveInfo(dss_file *dss, const char *pathname, char *units, const int unitsLength, char *type, const int typeLength)
     * }
     */
    public static MemorySegment hec_dss_tsRetrieveInfo$address() {
        return hec_dss_tsRetrieveInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_tsRetrieveInfo(dss_file *dss, const char *pathname, char *units, const int unitsLength, char *type, const int typeLength)
     * }
     */
    public static int hec_dss_tsRetrieveInfo(MemorySegment dss, MemorySegment pathname, MemorySegment units, int unitsLength, MemorySegment type, int typeLength) {
        var mh$ = hec_dss_tsRetrieveInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_tsRetrieveInfo", dss, pathname, units, unitsLength, type, typeLength);
            }
            return (int)mh$.invokeExact(dss, pathname, units, unitsLength, type, typeLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_record_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_record_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_record_count(dss_file *dss)
     * }
     */
    public static FunctionDescriptor hec_dss_record_count$descriptor() {
        return hec_dss_record_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_record_count(dss_file *dss)
     * }
     */
    public static MethodHandle hec_dss_record_count$handle() {
        return hec_dss_record_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_record_count(dss_file *dss)
     * }
     */
    public static MemorySegment hec_dss_record_count$address() {
        return hec_dss_record_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_record_count(dss_file *dss)
     * }
     */
    public static int hec_dss_record_count(MemorySegment dss) {
        var mh$ = hec_dss_record_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_record_count", dss);
            }
            return (int)mh$.invokeExact(dss);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_dataType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_dataType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_dataType(dss_file *dss, const char *pathname)
     * }
     */
    public static FunctionDescriptor hec_dss_dataType$descriptor() {
        return hec_dss_dataType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_dataType(dss_file *dss, const char *pathname)
     * }
     */
    public static MethodHandle hec_dss_dataType$handle() {
        return hec_dss_dataType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_dataType(dss_file *dss, const char *pathname)
     * }
     */
    public static MemorySegment hec_dss_dataType$address() {
        return hec_dss_dataType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_dataType(dss_file *dss, const char *pathname)
     * }
     */
    public static int hec_dss_dataType(MemorySegment dss, MemorySegment pathname) {
        var mh$ = hec_dss_dataType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_dataType", dss, pathname);
            }
            return (int)mh$.invokeExact(dss, pathname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_tsRetrieve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_tsRetrieve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_tsRetrieve(dss_file *dss, const char *pathname, const char *startDate, const char *startTime, const char *endDate, const char *endTime, int *timeArray, double *valueArray, const int arraySize, int *numberValuesRead, int *quality, const int qualityWidth, int *julianBaseDate, int *timeGranularitySeconds, char *units, const int unitsLength, char *type, const int typeLength)
     * }
     */
    public static FunctionDescriptor hec_dss_tsRetrieve$descriptor() {
        return hec_dss_tsRetrieve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_tsRetrieve(dss_file *dss, const char *pathname, const char *startDate, const char *startTime, const char *endDate, const char *endTime, int *timeArray, double *valueArray, const int arraySize, int *numberValuesRead, int *quality, const int qualityWidth, int *julianBaseDate, int *timeGranularitySeconds, char *units, const int unitsLength, char *type, const int typeLength)
     * }
     */
    public static MethodHandle hec_dss_tsRetrieve$handle() {
        return hec_dss_tsRetrieve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_tsRetrieve(dss_file *dss, const char *pathname, const char *startDate, const char *startTime, const char *endDate, const char *endTime, int *timeArray, double *valueArray, const int arraySize, int *numberValuesRead, int *quality, const int qualityWidth, int *julianBaseDate, int *timeGranularitySeconds, char *units, const int unitsLength, char *type, const int typeLength)
     * }
     */
    public static MemorySegment hec_dss_tsRetrieve$address() {
        return hec_dss_tsRetrieve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_tsRetrieve(dss_file *dss, const char *pathname, const char *startDate, const char *startTime, const char *endDate, const char *endTime, int *timeArray, double *valueArray, const int arraySize, int *numberValuesRead, int *quality, const int qualityWidth, int *julianBaseDate, int *timeGranularitySeconds, char *units, const int unitsLength, char *type, const int typeLength)
     * }
     */
    public static int hec_dss_tsRetrieve(MemorySegment dss, MemorySegment pathname, MemorySegment startDate, MemorySegment startTime, MemorySegment endDate, MemorySegment endTime, MemorySegment timeArray, MemorySegment valueArray, int arraySize, MemorySegment numberValuesRead, MemorySegment quality, int qualityWidth, MemorySegment julianBaseDate, MemorySegment timeGranularitySeconds, MemorySegment units, int unitsLength, MemorySegment type, int typeLength) {
        var mh$ = hec_dss_tsRetrieve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_tsRetrieve", dss, pathname, startDate, startTime, endDate, endTime, timeArray, valueArray, arraySize, numberValuesRead, quality, qualityWidth, julianBaseDate, timeGranularitySeconds, units, unitsLength, type, typeLength);
            }
            return (int)mh$.invokeExact(dss, pathname, startDate, startTime, endDate, endTime, timeArray, valueArray, arraySize, numberValuesRead, quality, qualityWidth, julianBaseDate, timeGranularitySeconds, units, unitsLength, type, typeLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_tsStoreRegular {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_tsStoreRegular");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_tsStoreRegular(dss_file *dss, const char *pathname, const char *startDate, const char *startTime, double *valueArray, const int valueArraySize, int *qualityArray, const int qualityArraySize, const int saveAsFloat, const char *units, const char *type)
     * }
     */
    public static FunctionDescriptor hec_dss_tsStoreRegular$descriptor() {
        return hec_dss_tsStoreRegular.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_tsStoreRegular(dss_file *dss, const char *pathname, const char *startDate, const char *startTime, double *valueArray, const int valueArraySize, int *qualityArray, const int qualityArraySize, const int saveAsFloat, const char *units, const char *type)
     * }
     */
    public static MethodHandle hec_dss_tsStoreRegular$handle() {
        return hec_dss_tsStoreRegular.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_tsStoreRegular(dss_file *dss, const char *pathname, const char *startDate, const char *startTime, double *valueArray, const int valueArraySize, int *qualityArray, const int qualityArraySize, const int saveAsFloat, const char *units, const char *type)
     * }
     */
    public static MemorySegment hec_dss_tsStoreRegular$address() {
        return hec_dss_tsStoreRegular.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_tsStoreRegular(dss_file *dss, const char *pathname, const char *startDate, const char *startTime, double *valueArray, const int valueArraySize, int *qualityArray, const int qualityArraySize, const int saveAsFloat, const char *units, const char *type)
     * }
     */
    public static int hec_dss_tsStoreRegular(MemorySegment dss, MemorySegment pathname, MemorySegment startDate, MemorySegment startTime, MemorySegment valueArray, int valueArraySize, MemorySegment qualityArray, int qualityArraySize, int saveAsFloat, MemorySegment units, MemorySegment type) {
        var mh$ = hec_dss_tsStoreRegular.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_tsStoreRegular", dss, pathname, startDate, startTime, valueArray, valueArraySize, qualityArray, qualityArraySize, saveAsFloat, units, type);
            }
            return (int)mh$.invokeExact(dss, pathname, startDate, startTime, valueArray, valueArraySize, qualityArray, qualityArraySize, saveAsFloat, units, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_tsStoreIregular {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_tsStoreIregular");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_tsStoreIregular(dss_file *dss, const char *pathname, const char *startDateBase, int *times, const int timeGranularitySeconds, double *valueArray, const int valueArraySize, int *qualityArray, const int qualityArraySize, const int saveAsFloat, const char *units, const char *type)
     * }
     */
    public static FunctionDescriptor hec_dss_tsStoreIregular$descriptor() {
        return hec_dss_tsStoreIregular.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_tsStoreIregular(dss_file *dss, const char *pathname, const char *startDateBase, int *times, const int timeGranularitySeconds, double *valueArray, const int valueArraySize, int *qualityArray, const int qualityArraySize, const int saveAsFloat, const char *units, const char *type)
     * }
     */
    public static MethodHandle hec_dss_tsStoreIregular$handle() {
        return hec_dss_tsStoreIregular.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_tsStoreIregular(dss_file *dss, const char *pathname, const char *startDateBase, int *times, const int timeGranularitySeconds, double *valueArray, const int valueArraySize, int *qualityArray, const int qualityArraySize, const int saveAsFloat, const char *units, const char *type)
     * }
     */
    public static MemorySegment hec_dss_tsStoreIregular$address() {
        return hec_dss_tsStoreIregular.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_tsStoreIregular(dss_file *dss, const char *pathname, const char *startDateBase, int *times, const int timeGranularitySeconds, double *valueArray, const int valueArraySize, int *qualityArray, const int qualityArraySize, const int saveAsFloat, const char *units, const char *type)
     * }
     */
    public static int hec_dss_tsStoreIregular(MemorySegment dss, MemorySegment pathname, MemorySegment startDateBase, MemorySegment times, int timeGranularitySeconds, MemorySegment valueArray, int valueArraySize, MemorySegment qualityArray, int qualityArraySize, int saveAsFloat, MemorySegment units, MemorySegment type) {
        var mh$ = hec_dss_tsStoreIregular.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_tsStoreIregular", dss, pathname, startDateBase, times, timeGranularitySeconds, valueArray, valueArraySize, qualityArray, qualityArraySize, saveAsFloat, units, type);
            }
            return (int)mh$.invokeExact(dss, pathname, startDateBase, times, timeGranularitySeconds, valueArray, valueArraySize, qualityArray, qualityArraySize, saveAsFloat, units, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_locationRetrieve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_locationRetrieve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_locationRetrieve(dss_file *dss, const char *fullPath, double *x, double *y, double *z, int *coordinateSystem, int *coordinateID, int *horizontalUnits, int *horizontalDatum, int *verticalUnits, int *verticalDatum, char *timeZoneName, const int timeZoneNameLength, char *supplemental, const int supplementalLength)
     * }
     */
    public static FunctionDescriptor hec_dss_locationRetrieve$descriptor() {
        return hec_dss_locationRetrieve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_locationRetrieve(dss_file *dss, const char *fullPath, double *x, double *y, double *z, int *coordinateSystem, int *coordinateID, int *horizontalUnits, int *horizontalDatum, int *verticalUnits, int *verticalDatum, char *timeZoneName, const int timeZoneNameLength, char *supplemental, const int supplementalLength)
     * }
     */
    public static MethodHandle hec_dss_locationRetrieve$handle() {
        return hec_dss_locationRetrieve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_locationRetrieve(dss_file *dss, const char *fullPath, double *x, double *y, double *z, int *coordinateSystem, int *coordinateID, int *horizontalUnits, int *horizontalDatum, int *verticalUnits, int *verticalDatum, char *timeZoneName, const int timeZoneNameLength, char *supplemental, const int supplementalLength)
     * }
     */
    public static MemorySegment hec_dss_locationRetrieve$address() {
        return hec_dss_locationRetrieve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_locationRetrieve(dss_file *dss, const char *fullPath, double *x, double *y, double *z, int *coordinateSystem, int *coordinateID, int *horizontalUnits, int *horizontalDatum, int *verticalUnits, int *verticalDatum, char *timeZoneName, const int timeZoneNameLength, char *supplemental, const int supplementalLength)
     * }
     */
    public static int hec_dss_locationRetrieve(MemorySegment dss, MemorySegment fullPath, MemorySegment x, MemorySegment y, MemorySegment z, MemorySegment coordinateSystem, MemorySegment coordinateID, MemorySegment horizontalUnits, MemorySegment horizontalDatum, MemorySegment verticalUnits, MemorySegment verticalDatum, MemorySegment timeZoneName, int timeZoneNameLength, MemorySegment supplemental, int supplementalLength) {
        var mh$ = hec_dss_locationRetrieve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_locationRetrieve", dss, fullPath, x, y, z, coordinateSystem, coordinateID, horizontalUnits, horizontalDatum, verticalUnits, verticalDatum, timeZoneName, timeZoneNameLength, supplemental, supplementalLength);
            }
            return (int)mh$.invokeExact(dss, fullPath, x, y, z, coordinateSystem, coordinateID, horizontalUnits, horizontalDatum, verticalUnits, verticalDatum, timeZoneName, timeZoneNameLength, supplemental, supplementalLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_locationStore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_DOUBLE,
            hecdss_h.C_DOUBLE,
            hecdss_h.C_DOUBLE,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_locationStore");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_locationStore(dss_file *dss, const char *fullPath, const double x, const double y, const double z, const int coordinateSystem, const int coordinateID, const int horizontalUnits, const int horizontalDatum, const int verticalUnits, const int verticalDatum, const char *timeZoneName, const char *supplemental, const int replace)
     * }
     */
    public static FunctionDescriptor hec_dss_locationStore$descriptor() {
        return hec_dss_locationStore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_locationStore(dss_file *dss, const char *fullPath, const double x, const double y, const double z, const int coordinateSystem, const int coordinateID, const int horizontalUnits, const int horizontalDatum, const int verticalUnits, const int verticalDatum, const char *timeZoneName, const char *supplemental, const int replace)
     * }
     */
    public static MethodHandle hec_dss_locationStore$handle() {
        return hec_dss_locationStore.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_locationStore(dss_file *dss, const char *fullPath, const double x, const double y, const double z, const int coordinateSystem, const int coordinateID, const int horizontalUnits, const int horizontalDatum, const int verticalUnits, const int verticalDatum, const char *timeZoneName, const char *supplemental, const int replace)
     * }
     */
    public static MemorySegment hec_dss_locationStore$address() {
        return hec_dss_locationStore.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_locationStore(dss_file *dss, const char *fullPath, const double x, const double y, const double z, const int coordinateSystem, const int coordinateID, const int horizontalUnits, const int horizontalDatum, const int verticalUnits, const int verticalDatum, const char *timeZoneName, const char *supplemental, const int replace)
     * }
     */
    public static int hec_dss_locationStore(MemorySegment dss, MemorySegment fullPath, double x, double y, double z, int coordinateSystem, int coordinateID, int horizontalUnits, int horizontalDatum, int verticalUnits, int verticalDatum, MemorySegment timeZoneName, MemorySegment supplemental, int replace) {
        var mh$ = hec_dss_locationStore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_locationStore", dss, fullPath, x, y, z, coordinateSystem, coordinateID, horizontalUnits, horizontalDatum, verticalUnits, verticalDatum, timeZoneName, supplemental, replace);
            }
            return (int)mh$.invokeExact(dss, fullPath, x, y, z, coordinateSystem, coordinateID, horizontalUnits, horizontalDatum, verticalUnits, verticalDatum, timeZoneName, supplemental, replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_pdRetrieveInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_pdRetrieveInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_pdRetrieveInfo(dss_file *dss, const char *pathname, int *numberOrdinates, int *numberCurves, char *unitsIndependent, const int unitsIndependentLength, char *unitsDependent, const int unitsDependentLength, char *typeIndependent, const int typeIndependentLength, char *typeDependent, const int typeDependentLength, int *labelsLength)
     * }
     */
    public static FunctionDescriptor hec_dss_pdRetrieveInfo$descriptor() {
        return hec_dss_pdRetrieveInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_pdRetrieveInfo(dss_file *dss, const char *pathname, int *numberOrdinates, int *numberCurves, char *unitsIndependent, const int unitsIndependentLength, char *unitsDependent, const int unitsDependentLength, char *typeIndependent, const int typeIndependentLength, char *typeDependent, const int typeDependentLength, int *labelsLength)
     * }
     */
    public static MethodHandle hec_dss_pdRetrieveInfo$handle() {
        return hec_dss_pdRetrieveInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_pdRetrieveInfo(dss_file *dss, const char *pathname, int *numberOrdinates, int *numberCurves, char *unitsIndependent, const int unitsIndependentLength, char *unitsDependent, const int unitsDependentLength, char *typeIndependent, const int typeIndependentLength, char *typeDependent, const int typeDependentLength, int *labelsLength)
     * }
     */
    public static MemorySegment hec_dss_pdRetrieveInfo$address() {
        return hec_dss_pdRetrieveInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_pdRetrieveInfo(dss_file *dss, const char *pathname, int *numberOrdinates, int *numberCurves, char *unitsIndependent, const int unitsIndependentLength, char *unitsDependent, const int unitsDependentLength, char *typeIndependent, const int typeIndependentLength, char *typeDependent, const int typeDependentLength, int *labelsLength)
     * }
     */
    public static int hec_dss_pdRetrieveInfo(MemorySegment dss, MemorySegment pathname, MemorySegment numberOrdinates, MemorySegment numberCurves, MemorySegment unitsIndependent, int unitsIndependentLength, MemorySegment unitsDependent, int unitsDependentLength, MemorySegment typeIndependent, int typeIndependentLength, MemorySegment typeDependent, int typeDependentLength, MemorySegment labelsLength) {
        var mh$ = hec_dss_pdRetrieveInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_pdRetrieveInfo", dss, pathname, numberOrdinates, numberCurves, unitsIndependent, unitsIndependentLength, unitsDependent, unitsDependentLength, typeIndependent, typeIndependentLength, typeDependent, typeDependentLength, labelsLength);
            }
            return (int)mh$.invokeExact(dss, pathname, numberOrdinates, numberCurves, unitsIndependent, unitsIndependentLength, unitsDependent, unitsDependentLength, typeIndependent, typeIndependentLength, typeDependent, typeDependentLength, labelsLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_recordType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_recordType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_recordType(dss_file *dss, const char *pathname)
     * }
     */
    public static FunctionDescriptor hec_dss_recordType$descriptor() {
        return hec_dss_recordType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_recordType(dss_file *dss, const char *pathname)
     * }
     */
    public static MethodHandle hec_dss_recordType$handle() {
        return hec_dss_recordType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_recordType(dss_file *dss, const char *pathname)
     * }
     */
    public static MemorySegment hec_dss_recordType$address() {
        return hec_dss_recordType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_recordType(dss_file *dss, const char *pathname)
     * }
     */
    public static int hec_dss_recordType(MemorySegment dss, MemorySegment pathname) {
        var mh$ = hec_dss_recordType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_recordType", dss, pathname);
            }
            return (int)mh$.invokeExact(dss, pathname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_pdRetrieve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_pdRetrieve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_pdRetrieve(dss_file *dss, const char *pathname, double *doubleOrdinates, const int doubleOrdinatesLength, double *doubleValues, const int doubleValuesLength, int *numberOrdinates, int *numberCurves, char *unitsIndependent, const int unitsIndependentLength, char *typeIndependent, const int typeIndependentLength, char *unitsDependent, const int unitsDependentLength, char *typeDependent, const int typeDependentLength, char *labels, const int labelsLength)
     * }
     */
    public static FunctionDescriptor hec_dss_pdRetrieve$descriptor() {
        return hec_dss_pdRetrieve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_pdRetrieve(dss_file *dss, const char *pathname, double *doubleOrdinates, const int doubleOrdinatesLength, double *doubleValues, const int doubleValuesLength, int *numberOrdinates, int *numberCurves, char *unitsIndependent, const int unitsIndependentLength, char *typeIndependent, const int typeIndependentLength, char *unitsDependent, const int unitsDependentLength, char *typeDependent, const int typeDependentLength, char *labels, const int labelsLength)
     * }
     */
    public static MethodHandle hec_dss_pdRetrieve$handle() {
        return hec_dss_pdRetrieve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_pdRetrieve(dss_file *dss, const char *pathname, double *doubleOrdinates, const int doubleOrdinatesLength, double *doubleValues, const int doubleValuesLength, int *numberOrdinates, int *numberCurves, char *unitsIndependent, const int unitsIndependentLength, char *typeIndependent, const int typeIndependentLength, char *unitsDependent, const int unitsDependentLength, char *typeDependent, const int typeDependentLength, char *labels, const int labelsLength)
     * }
     */
    public static MemorySegment hec_dss_pdRetrieve$address() {
        return hec_dss_pdRetrieve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_pdRetrieve(dss_file *dss, const char *pathname, double *doubleOrdinates, const int doubleOrdinatesLength, double *doubleValues, const int doubleValuesLength, int *numberOrdinates, int *numberCurves, char *unitsIndependent, const int unitsIndependentLength, char *typeIndependent, const int typeIndependentLength, char *unitsDependent, const int unitsDependentLength, char *typeDependent, const int typeDependentLength, char *labels, const int labelsLength)
     * }
     */
    public static int hec_dss_pdRetrieve(MemorySegment dss, MemorySegment pathname, MemorySegment doubleOrdinates, int doubleOrdinatesLength, MemorySegment doubleValues, int doubleValuesLength, MemorySegment numberOrdinates, MemorySegment numberCurves, MemorySegment unitsIndependent, int unitsIndependentLength, MemorySegment typeIndependent, int typeIndependentLength, MemorySegment unitsDependent, int unitsDependentLength, MemorySegment typeDependent, int typeDependentLength, MemorySegment labels, int labelsLength) {
        var mh$ = hec_dss_pdRetrieve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_pdRetrieve", dss, pathname, doubleOrdinates, doubleOrdinatesLength, doubleValues, doubleValuesLength, numberOrdinates, numberCurves, unitsIndependent, unitsIndependentLength, typeIndependent, typeIndependentLength, unitsDependent, unitsDependentLength, typeDependent, typeDependentLength, labels, labelsLength);
            }
            return (int)mh$.invokeExact(dss, pathname, doubleOrdinates, doubleOrdinatesLength, doubleValues, doubleValuesLength, numberOrdinates, numberCurves, unitsIndependent, unitsIndependentLength, typeIndependent, typeIndependentLength, unitsDependent, unitsDependentLength, typeDependent, typeDependentLength, labels, labelsLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_pdStore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_pdStore");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_pdStore(dss_file *dss, const char *pathname, double *doubleOrdinates, const int doubleOrdinatesLength, double *doubleValues, const int doubleValuesLength, const int numberOrdinates, const int numberCurves, const char *unitsIndependent, const char *typeIndependent, const char *unitsDependent, const char *typeDependent, const char *labels, const int labelsLength)
     * }
     */
    public static FunctionDescriptor hec_dss_pdStore$descriptor() {
        return hec_dss_pdStore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_pdStore(dss_file *dss, const char *pathname, double *doubleOrdinates, const int doubleOrdinatesLength, double *doubleValues, const int doubleValuesLength, const int numberOrdinates, const int numberCurves, const char *unitsIndependent, const char *typeIndependent, const char *unitsDependent, const char *typeDependent, const char *labels, const int labelsLength)
     * }
     */
    public static MethodHandle hec_dss_pdStore$handle() {
        return hec_dss_pdStore.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_pdStore(dss_file *dss, const char *pathname, double *doubleOrdinates, const int doubleOrdinatesLength, double *doubleValues, const int doubleValuesLength, const int numberOrdinates, const int numberCurves, const char *unitsIndependent, const char *typeIndependent, const char *unitsDependent, const char *typeDependent, const char *labels, const int labelsLength)
     * }
     */
    public static MemorySegment hec_dss_pdStore$address() {
        return hec_dss_pdStore.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_pdStore(dss_file *dss, const char *pathname, double *doubleOrdinates, const int doubleOrdinatesLength, double *doubleValues, const int doubleValuesLength, const int numberOrdinates, const int numberCurves, const char *unitsIndependent, const char *typeIndependent, const char *unitsDependent, const char *typeDependent, const char *labels, const int labelsLength)
     * }
     */
    public static int hec_dss_pdStore(MemorySegment dss, MemorySegment pathname, MemorySegment doubleOrdinates, int doubleOrdinatesLength, MemorySegment doubleValues, int doubleValuesLength, int numberOrdinates, int numberCurves, MemorySegment unitsIndependent, MemorySegment typeIndependent, MemorySegment unitsDependent, MemorySegment typeDependent, MemorySegment labels, int labelsLength) {
        var mh$ = hec_dss_pdStore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_pdStore", dss, pathname, doubleOrdinates, doubleOrdinatesLength, doubleValues, doubleValuesLength, numberOrdinates, numberCurves, unitsIndependent, typeIndependent, unitsDependent, typeDependent, labels, labelsLength);
            }
            return (int)mh$.invokeExact(dss, pathname, doubleOrdinates, doubleOrdinatesLength, doubleValues, doubleValuesLength, numberOrdinates, numberCurves, unitsIndependent, typeIndependent, unitsDependent, typeDependent, labels, labelsLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_gridRetrieve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_gridRetrieve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_gridRetrieve(dss_file *dss, const char *pathname, int boolRetrieveData, int *type, int *dataType, int *lowerLeftCellX, int *lowerLeftCellY, int *numberOfCellsX, int *numberOfCellsY, int *numberOfRanges, int *srsDefinitionType, int *timeZoneRawOffset, int *isInterval, int *isTimeStamped, char *dataUnits, const int dataUnitsLength, char *dataSource, const int dataSourceLength, char *srsName, const int srsNameLength, char *srsDefinition, const int srsDefinitionLength, char *timeZoneID, const int timeZoneIDLength, float *cellSize, float *xCoordOfGridCellZero, float *yCoordOfGridCellZero, float *nullValue, float *maxDataValue, float *minDataValue, float *meanDataValue, float *rangeLimitTable, const int rangeTablesLength, int *numberEqualOrExceedingRangeLimit, float *data, const int dataLength)
     * }
     */
    public static FunctionDescriptor hec_dss_gridRetrieve$descriptor() {
        return hec_dss_gridRetrieve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_gridRetrieve(dss_file *dss, const char *pathname, int boolRetrieveData, int *type, int *dataType, int *lowerLeftCellX, int *lowerLeftCellY, int *numberOfCellsX, int *numberOfCellsY, int *numberOfRanges, int *srsDefinitionType, int *timeZoneRawOffset, int *isInterval, int *isTimeStamped, char *dataUnits, const int dataUnitsLength, char *dataSource, const int dataSourceLength, char *srsName, const int srsNameLength, char *srsDefinition, const int srsDefinitionLength, char *timeZoneID, const int timeZoneIDLength, float *cellSize, float *xCoordOfGridCellZero, float *yCoordOfGridCellZero, float *nullValue, float *maxDataValue, float *minDataValue, float *meanDataValue, float *rangeLimitTable, const int rangeTablesLength, int *numberEqualOrExceedingRangeLimit, float *data, const int dataLength)
     * }
     */
    public static MethodHandle hec_dss_gridRetrieve$handle() {
        return hec_dss_gridRetrieve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_gridRetrieve(dss_file *dss, const char *pathname, int boolRetrieveData, int *type, int *dataType, int *lowerLeftCellX, int *lowerLeftCellY, int *numberOfCellsX, int *numberOfCellsY, int *numberOfRanges, int *srsDefinitionType, int *timeZoneRawOffset, int *isInterval, int *isTimeStamped, char *dataUnits, const int dataUnitsLength, char *dataSource, const int dataSourceLength, char *srsName, const int srsNameLength, char *srsDefinition, const int srsDefinitionLength, char *timeZoneID, const int timeZoneIDLength, float *cellSize, float *xCoordOfGridCellZero, float *yCoordOfGridCellZero, float *nullValue, float *maxDataValue, float *minDataValue, float *meanDataValue, float *rangeLimitTable, const int rangeTablesLength, int *numberEqualOrExceedingRangeLimit, float *data, const int dataLength)
     * }
     */
    public static MemorySegment hec_dss_gridRetrieve$address() {
        return hec_dss_gridRetrieve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_gridRetrieve(dss_file *dss, const char *pathname, int boolRetrieveData, int *type, int *dataType, int *lowerLeftCellX, int *lowerLeftCellY, int *numberOfCellsX, int *numberOfCellsY, int *numberOfRanges, int *srsDefinitionType, int *timeZoneRawOffset, int *isInterval, int *isTimeStamped, char *dataUnits, const int dataUnitsLength, char *dataSource, const int dataSourceLength, char *srsName, const int srsNameLength, char *srsDefinition, const int srsDefinitionLength, char *timeZoneID, const int timeZoneIDLength, float *cellSize, float *xCoordOfGridCellZero, float *yCoordOfGridCellZero, float *nullValue, float *maxDataValue, float *minDataValue, float *meanDataValue, float *rangeLimitTable, const int rangeTablesLength, int *numberEqualOrExceedingRangeLimit, float *data, const int dataLength)
     * }
     */
    public static int hec_dss_gridRetrieve(MemorySegment dss, MemorySegment pathname, int boolRetrieveData, MemorySegment type, MemorySegment dataType, MemorySegment lowerLeftCellX, MemorySegment lowerLeftCellY, MemorySegment numberOfCellsX, MemorySegment numberOfCellsY, MemorySegment numberOfRanges, MemorySegment srsDefinitionType, MemorySegment timeZoneRawOffset, MemorySegment isInterval, MemorySegment isTimeStamped, MemorySegment dataUnits, int dataUnitsLength, MemorySegment dataSource, int dataSourceLength, MemorySegment srsName, int srsNameLength, MemorySegment srsDefinition, int srsDefinitionLength, MemorySegment timeZoneID, int timeZoneIDLength, MemorySegment cellSize, MemorySegment xCoordOfGridCellZero, MemorySegment yCoordOfGridCellZero, MemorySegment nullValue, MemorySegment maxDataValue, MemorySegment minDataValue, MemorySegment meanDataValue, MemorySegment rangeLimitTable, int rangeTablesLength, MemorySegment numberEqualOrExceedingRangeLimit, MemorySegment data, int dataLength) {
        var mh$ = hec_dss_gridRetrieve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_gridRetrieve", dss, pathname, boolRetrieveData, type, dataType, lowerLeftCellX, lowerLeftCellY, numberOfCellsX, numberOfCellsY, numberOfRanges, srsDefinitionType, timeZoneRawOffset, isInterval, isTimeStamped, dataUnits, dataUnitsLength, dataSource, dataSourceLength, srsName, srsNameLength, srsDefinition, srsDefinitionLength, timeZoneID, timeZoneIDLength, cellSize, xCoordOfGridCellZero, yCoordOfGridCellZero, nullValue, maxDataValue, minDataValue, meanDataValue, rangeLimitTable, rangeTablesLength, numberEqualOrExceedingRangeLimit, data, dataLength);
            }
            return (int)mh$.invokeExact(dss, pathname, boolRetrieveData, type, dataType, lowerLeftCellX, lowerLeftCellY, numberOfCellsX, numberOfCellsY, numberOfRanges, srsDefinitionType, timeZoneRawOffset, isInterval, isTimeStamped, dataUnits, dataUnitsLength, dataSource, dataSourceLength, srsName, srsNameLength, srsDefinition, srsDefinitionLength, timeZoneID, timeZoneIDLength, cellSize, xCoordOfGridCellZero, yCoordOfGridCellZero, nullValue, maxDataValue, minDataValue, meanDataValue, rangeLimitTable, rangeTablesLength, numberEqualOrExceedingRangeLimit, data, dataLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_gridStore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_FLOAT,
            hecdss_h.C_FLOAT,
            hecdss_h.C_FLOAT,
            hecdss_h.C_FLOAT,
            hecdss_h.C_FLOAT,
            hecdss_h.C_FLOAT,
            hecdss_h.C_FLOAT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_gridStore");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_gridStore(dss_file *dss, const char *pathname, const int gridType, const int dataType, const int lowerLeftCellX, const int lowerLeftCellY, const int numberOfCellsX, const int numberOfCellsY, const int numberOfRanges, const int srsDefinitionType, const int timeZoneRawOffset, int isInterval, const int isTimeStamped, const char *dataUnits, const char *dataSource, const char *srsName, const char *srsDefinition, const char *timeZoneID, const float cellSize, const float xCoordOfGridCellZero, const float yCoordOfGridCellZero, const float nullValue, const float maxDataValue, const float minDataValue, const float meanDataValue, float *rangeLimitTable, int *numberEqualOrExceedingRangeLimit, float *data)
     * }
     */
    public static FunctionDescriptor hec_dss_gridStore$descriptor() {
        return hec_dss_gridStore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_gridStore(dss_file *dss, const char *pathname, const int gridType, const int dataType, const int lowerLeftCellX, const int lowerLeftCellY, const int numberOfCellsX, const int numberOfCellsY, const int numberOfRanges, const int srsDefinitionType, const int timeZoneRawOffset, int isInterval, const int isTimeStamped, const char *dataUnits, const char *dataSource, const char *srsName, const char *srsDefinition, const char *timeZoneID, const float cellSize, const float xCoordOfGridCellZero, const float yCoordOfGridCellZero, const float nullValue, const float maxDataValue, const float minDataValue, const float meanDataValue, float *rangeLimitTable, int *numberEqualOrExceedingRangeLimit, float *data)
     * }
     */
    public static MethodHandle hec_dss_gridStore$handle() {
        return hec_dss_gridStore.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_gridStore(dss_file *dss, const char *pathname, const int gridType, const int dataType, const int lowerLeftCellX, const int lowerLeftCellY, const int numberOfCellsX, const int numberOfCellsY, const int numberOfRanges, const int srsDefinitionType, const int timeZoneRawOffset, int isInterval, const int isTimeStamped, const char *dataUnits, const char *dataSource, const char *srsName, const char *srsDefinition, const char *timeZoneID, const float cellSize, const float xCoordOfGridCellZero, const float yCoordOfGridCellZero, const float nullValue, const float maxDataValue, const float minDataValue, const float meanDataValue, float *rangeLimitTable, int *numberEqualOrExceedingRangeLimit, float *data)
     * }
     */
    public static MemorySegment hec_dss_gridStore$address() {
        return hec_dss_gridStore.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_gridStore(dss_file *dss, const char *pathname, const int gridType, const int dataType, const int lowerLeftCellX, const int lowerLeftCellY, const int numberOfCellsX, const int numberOfCellsY, const int numberOfRanges, const int srsDefinitionType, const int timeZoneRawOffset, int isInterval, const int isTimeStamped, const char *dataUnits, const char *dataSource, const char *srsName, const char *srsDefinition, const char *timeZoneID, const float cellSize, const float xCoordOfGridCellZero, const float yCoordOfGridCellZero, const float nullValue, const float maxDataValue, const float minDataValue, const float meanDataValue, float *rangeLimitTable, int *numberEqualOrExceedingRangeLimit, float *data)
     * }
     */
    public static int hec_dss_gridStore(MemorySegment dss, MemorySegment pathname, int gridType, int dataType, int lowerLeftCellX, int lowerLeftCellY, int numberOfCellsX, int numberOfCellsY, int numberOfRanges, int srsDefinitionType, int timeZoneRawOffset, int isInterval, int isTimeStamped, MemorySegment dataUnits, MemorySegment dataSource, MemorySegment srsName, MemorySegment srsDefinition, MemorySegment timeZoneID, float cellSize, float xCoordOfGridCellZero, float yCoordOfGridCellZero, float nullValue, float maxDataValue, float minDataValue, float meanDataValue, MemorySegment rangeLimitTable, MemorySegment numberEqualOrExceedingRangeLimit, MemorySegment data) {
        var mh$ = hec_dss_gridStore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_gridStore", dss, pathname, gridType, dataType, lowerLeftCellX, lowerLeftCellY, numberOfCellsX, numberOfCellsY, numberOfRanges, srsDefinitionType, timeZoneRawOffset, isInterval, isTimeStamped, dataUnits, dataSource, srsName, srsDefinition, timeZoneID, cellSize, xCoordOfGridCellZero, yCoordOfGridCellZero, nullValue, maxDataValue, minDataValue, meanDataValue, rangeLimitTable, numberEqualOrExceedingRangeLimit, data);
            }
            return (int)mh$.invokeExact(dss, pathname, gridType, dataType, lowerLeftCellX, lowerLeftCellY, numberOfCellsX, numberOfCellsY, numberOfRanges, srsDefinitionType, timeZoneRawOffset, isInterval, isTimeStamped, dataUnits, dataSource, srsName, srsDefinition, timeZoneID, cellSize, xCoordOfGridCellZero, yCoordOfGridCellZero, nullValue, maxDataValue, minDataValue, meanDataValue, rangeLimitTable, numberEqualOrExceedingRangeLimit, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_dateToYearMonthDay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_dateToYearMonthDay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_dateToYearMonthDay(const char *date, int *year, int *month, int *day)
     * }
     */
    public static FunctionDescriptor hec_dss_dateToYearMonthDay$descriptor() {
        return hec_dss_dateToYearMonthDay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_dateToYearMonthDay(const char *date, int *year, int *month, int *day)
     * }
     */
    public static MethodHandle hec_dss_dateToYearMonthDay$handle() {
        return hec_dss_dateToYearMonthDay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_dateToYearMonthDay(const char *date, int *year, int *month, int *day)
     * }
     */
    public static MemorySegment hec_dss_dateToYearMonthDay$address() {
        return hec_dss_dateToYearMonthDay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_dateToYearMonthDay(const char *date, int *year, int *month, int *day)
     * }
     */
    public static int hec_dss_dateToYearMonthDay(MemorySegment date, MemorySegment year, MemorySegment month, MemorySegment day) {
        var mh$ = hec_dss_dateToYearMonthDay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_dateToYearMonthDay", date, year, month, day);
            }
            return (int)mh$.invokeExact(date, year, month, day);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_delete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_delete(dss_file *dss, const char *pathname)
     * }
     */
    public static FunctionDescriptor hec_dss_delete$descriptor() {
        return hec_dss_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_delete(dss_file *dss, const char *pathname)
     * }
     */
    public static MethodHandle hec_dss_delete$handle() {
        return hec_dss_delete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_delete(dss_file *dss, const char *pathname)
     * }
     */
    public static MemorySegment hec_dss_delete$address() {
        return hec_dss_delete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_delete(dss_file *dss, const char *pathname)
     * }
     */
    public static int hec_dss_delete(MemorySegment dss, MemorySegment pathname) {
        var mh$ = hec_dss_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_delete", dss, pathname);
            }
            return (int)mh$.invokeExact(dss, pathname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_squeeze {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_squeeze");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_squeeze(const char *pathname)
     * }
     */
    public static FunctionDescriptor hec_dss_squeeze$descriptor() {
        return hec_dss_squeeze.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_squeeze(const char *pathname)
     * }
     */
    public static MethodHandle hec_dss_squeeze$handle() {
        return hec_dss_squeeze.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_squeeze(const char *pathname)
     * }
     */
    public static MemorySegment hec_dss_squeeze$address() {
        return hec_dss_squeeze.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_squeeze(const char *pathname)
     * }
     */
    public static int hec_dss_squeeze(MemorySegment pathname) {
        var mh$ = hec_dss_squeeze.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_squeeze", pathname);
            }
            return (int)mh$.invokeExact(pathname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_dateToJulian {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_dateToJulian");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_dateToJulian(const char *date)
     * }
     */
    public static FunctionDescriptor hec_dss_dateToJulian$descriptor() {
        return hec_dss_dateToJulian.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_dateToJulian(const char *date)
     * }
     */
    public static MethodHandle hec_dss_dateToJulian$handle() {
        return hec_dss_dateToJulian.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_dateToJulian(const char *date)
     * }
     */
    public static MemorySegment hec_dss_dateToJulian$address() {
        return hec_dss_dateToJulian.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_dateToJulian(const char *date)
     * }
     */
    public static int hec_dss_dateToJulian(MemorySegment date) {
        var mh$ = hec_dss_dateToJulian.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_dateToJulian", date);
            }
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_julianToYearMonthDay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_julianToYearMonthDay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void hec_dss_julianToYearMonthDay(const int julian, int *year, int *month, int *day)
     * }
     */
    public static FunctionDescriptor hec_dss_julianToYearMonthDay$descriptor() {
        return hec_dss_julianToYearMonthDay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void hec_dss_julianToYearMonthDay(const int julian, int *year, int *month, int *day)
     * }
     */
    public static MethodHandle hec_dss_julianToYearMonthDay$handle() {
        return hec_dss_julianToYearMonthDay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void hec_dss_julianToYearMonthDay(const int julian, int *year, int *month, int *day)
     * }
     */
    public static MemorySegment hec_dss_julianToYearMonthDay$address() {
        return hec_dss_julianToYearMonthDay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void hec_dss_julianToYearMonthDay(const int julian, int *year, int *month, int *day)
     * }
     */
    public static void hec_dss_julianToYearMonthDay(int julian, MemorySegment year, MemorySegment month, MemorySegment day) {
        var mh$ = hec_dss_julianToYearMonthDay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_julianToYearMonthDay", julian, year, month, day);
            }
            mh$.invokeExact(julian, year, month, day);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class hec_dss_convertToVersion7 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            hecdss_h.C_INT,
            hecdss_h.C_POINTER,
            hecdss_h.C_POINTER
        );

        public static final MemorySegment ADDR = hecdss_h.findOrThrow("hec_dss_convertToVersion7");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int hec_dss_convertToVersion7(const char *filenameVersion6, const char *filenameVersion7)
     * }
     */
    public static FunctionDescriptor hec_dss_convertToVersion7$descriptor() {
        return hec_dss_convertToVersion7.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int hec_dss_convertToVersion7(const char *filenameVersion6, const char *filenameVersion7)
     * }
     */
    public static MethodHandle hec_dss_convertToVersion7$handle() {
        return hec_dss_convertToVersion7.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int hec_dss_convertToVersion7(const char *filenameVersion6, const char *filenameVersion7)
     * }
     */
    public static MemorySegment hec_dss_convertToVersion7$address() {
        return hec_dss_convertToVersion7.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int hec_dss_convertToVersion7(const char *filenameVersion6, const char *filenameVersion7)
     * }
     */
    public static int hec_dss_convertToVersion7(MemorySegment filenameVersion6, MemorySegment filenameVersion7) {
        var mh$ = hec_dss_convertToVersion7.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("hec_dss_convertToVersion7", filenameVersion6, filenameVersion7);
            }
            return (int)mh$.invokeExact(filenameVersion6, filenameVersion7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

